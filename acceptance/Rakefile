$:.unshift(File.join(File.dirname(__FILE__), "..", "lib")).
  unshift(File.join(File.dirname(__FILE__), "lib"))

require 'spec/rake/spectask'
require 'fileutils'

require 'ciat'
require 'ciat/processors/java'
require 'ciat/processors/parrot'
require 'ciat/feedback/composite'

require 'feedback_tester'
require 'blowup_feedback'
require 'helpers'

desc "Cleans the output directory, compiles the Java code, runs tests"
task :default => :full_exercise

Spec::Rake::SpecTask.new(:acceptance)
task :acceptance => :full_exercise

task :full_exercise => [:clean_start, :compile_java,
                        :exercise_ciat,
                        :exercise_java,
                        :exercise_java_interpreter,
                        :exercise_parrot,
                        :exercise_java_and_parrot]
                        
task :view do
  sh "open #{Dir["temp/*.html"].join(" ")}"
end

task :compile_java do
  unless system("cd java ; javac *.java")
    raise "Java files failed to compile!"
  end
end

task :clean_start do
  FileUtils.rm_r("temp/") if File.exists?("temp/")
end

# *************************************************************
# tasks to exercise CIAT itself
task :exercise_ciat => [:less_simple,
                        :subfolders,
                        :errors_and_failures]
    
CIAT::RakeTask.new(:less_simple) do |task|
  task.processors << java_compiler("Hello")
  task.folder = 'ciat/less-simple'
  task.feedback = feedback(2, [:green, :green],
                    :report_filename => 'less-simple.html',
                    :report_title => 'Less Simple Tests')
end

CIAT::RakeTask.new(:subfolders) do |task|
  task.processors << java_compiler("Hello")
  task.folder = 'ciat/subfolders'
  task.feedback = feedback(3, [:green, :green, :green],
                    :report_filename => 'subfolders.html',
                    :report_title => "Subfolder Tests")
end
    
task :errors_and_failures do
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/compile-error.ciat',
      :feedback => feedback(1, [:yellow, :unset],
                    :report_filename => 'compile-error.html',
                    :report_title => "Errors during compilation")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/compile-fail.ciat',
      :feedback => feedback(1, [:red, :unset],
                    :report_filename => 'compile-fail.html',
                    :report_title => "Failures in compilation")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/execution-error.ciat',
      :feedback => feedback(1, [:green, :yellow],
                    :report_filename => 'execution-error.html',
                    :report_title => "Errors during execution")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/execution-fail.ciat',
      :feedback => feedback(1, [:green, :red],
                    :report_filename => 'execution-fail.html',
                    :report_title => "Failures in execution")
      )
    suite.run
  end
  
  deliberate_failure(IOError, "no test files specified") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello")],
      :folder => 'ciat/folder-does-not-exist',
      :feedback => feedback(0, [],
                    :report_filename => 'folder-does-not-exist.html',
                    :report_title => "Input Folder Doesn't Exist")
      )
    suite.run
  end
end

# *************************************************************
# task to exercise implemented-in-Java compilers
task :exercise_java do
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello")],
      :folder => 'ciat/java',
      :feedback => feedback(3, [:green, :yellow, :red],
                    :report_filename => 'java.html')
      )
    suite.run
  end
end

# *************************************************************
# task to exercise implemented-in-Java interpreter
task :exercise_java_interpreter do
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_interpreter("Hello")],
      :folder => 'ciat/java-interpreter',
      :feedback => feedback(3, [:green, :yellow, :red],
                    :report_filename => 'java-interpreter.html')
      )
    suite.run
  end
end

# *************************************************************
# task to exercise Parrot interpreter
task :exercise_parrot => [:good_parrot, :parrot_deliberate_error]

CIAT::RakeTask.new(:good_parrot) do |task|
  task.processors << parrot_executor(interpreter)
  task.folder = 'ciat/parrot'
  task.feedback = feedback(1, [:green], :report_filename => 'parrot.html')
end

CIAT::RakeTask.new(:parrot_deliberate_error) do |task|
  task.processors << parrot_executor(interpreter)
  task.folder = 'ciat/parrot-error'
  task.feedback = feedback(1, [:green], :report_filename => 'parrot-error.html')  
end

# *************************************************************
# task to exercise Java compiler and Parrot executor
CIAT::RakeTask.new(:exercise_java_and_parrot) do |task|
  task.processors << java_compiler("Parrot5")
  task.processors << parrot_executor(compilation_interpreter)
  task.folder = 'ciat/java-parrot'
  task.feedback = feedback(1, [:green, :green],
                    :report_filename => 'java-parrot.html')
end
