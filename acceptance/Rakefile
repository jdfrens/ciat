$:.unshift(File.join(File.dirname(__FILE__), "..", "lib")).
  unshift(File.join(File.dirname(__FILE__), "lib"))

require 'fileutils'

require 'ciat'
require 'ciat/compilers/java'
require 'ciat/processors/copy'
require 'ciat/executors/java'
require 'ciat/executors/parrot'
require 'ciat/feedback/composite'

require 'do_not_process_executor'
require 'do_nothing_processor'
require 'feedback_tester'
require 'blowup_feedback'
require 'helpers'

desc "Cleans the output directory, compiles the Java code, runs tests"
task :default => [:clean_start, :compile_java,
                  :exercise_ciat,
                  :exercise_java,
                  :exercise_java_interpreter,
                  :exercise_parrot,
                  :exercise_java_and_parrot] do
  check_output_files
end

task :compile_java do
  unless system("cd java ; javac *.java")
    raise "Java files failed to compile!"
  end
end

task :clean_start do
  FileUtils.rm_r("temp/") if File.exists?("temp/")
end

# *************************************************************
# tasks to exercise CIAT itself
task :exercise_ciat => [:simple,
                        :less_simple,
                        :subfolders,
                        :errors_and_failures]
                        
CIAT::RakeTask.new(:simple) do |task|
  task.processors << copy_compiler
  task.files = ['ciat/simple.ciat']
  task.feedback = feedback(1, [:green])
end
    
CIAT::RakeTask.new(:less_simple) do |task|
  task.processors << java_compiler("Hello")
  task.processors << copy_executor
  task.folder = 'ciat/less-simple'
  task.report_filename = 'less-simple.html'
  task.report_title = "Less Simple Tests"
  task.feedback = feedback(2, [:green, :green, :green, :green])
end

CIAT::RakeTask.new(:subfolders) do |task|
  task.processors << copy_compiler
  task.folder = 'ciat/subfolders'
  task.report_filename = 'subfolders.html'
  task.report_title = "Subfolder Tests"
  task.feedback = feedback(3, [:green, :green, :green])
end
    
task :errors_and_failures do
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [DoNothingProcessor.new(:yellow), DoNotProcessExecutor.new],
      :files => 'ciat/errors-and-failures/compile-error.ciat',
      :report_filename => 'compile-error.html',
      :report_title => "Errors during compilation",
      :feedback => feedback(1, [:yellow, :unset]))
    suite.run
  end
  
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [DoNothingProcessor.new(:red), DoNotProcessExecutor.new],
      :files => 'ciat/errors-and-failures/compile-fail.ciat',
      :report_filename => 'compile-fail.html',
      :report_title => "Failures in compilation",
      :feedback => feedback(1, [:red, :unset]))
    suite.run
  end
  
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [copy_compiler, DoNothingProcessor.new(:yellow)],
      :files => 'ciat/errors-and-failures/execution-error.ciat',
      :report_filename => 'execution-error.html',
      :report_title => "Errors during execution",
      :feedback => feedback(1, [:green, :yellow]))
    suite.run
  end
  
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [copy_compiler, DoNothingProcessor.new(:red)],
      :files => 'ciat/errors-and-failures/execution-fail.ciat',
      :report_filename => 'execution-fail.html',
      :report_title => "Failures in execution",
      :feedback => feedback(1, [:green, :red]))
    suite.run
  end
end

# *************************************************************
# task to exercise implemented-in-Java compilers
task :exercise_java do
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [java_compiler("Hello")],
      :folder => 'ciat/java',
      :report_filename => 'java.html',
      :feedback => feedback(3, [:green, :yellow, :red]))
    suite.run
  end
end

# *************************************************************
# task to exercise implemented-in-Java interpreter
task :exercise_java_interpreter do
  deliberate_failure do
    suite = CIAT::Suite.new(
      :processors => [java_interpreter("Hello")],
      :folder => 'ciat/java-interpreter',
      :report_filename => 'java-interpreter.html',
      :feedback => feedback(3, [:green, :yellow, :red]))
    suite.run
  end
end

# *************************************************************
# task to exercise Parrot interpreter
CIAT::RakeTask.new(:exercise_parrot) do |task|
  task.processors << parrot_executor(interpreter)
  task.folder = 'ciat/parrot'
  # TODO: parrot execution that errors
  # TODO: parrot execution that fails
  task.report_filename = 'parrot.html'
  task.feedback = feedback(1, [:green])
end

# *************************************************************
# task to exercise Java compiler and Parrot executor
CIAT::RakeTask.new(:exercise_java_and_parrot) do |task|
  task.processors << java_compiler("Parrot5")
  task.processors << parrot_executor(compilation_interpreter)
  task.folder = 'ciat/java-parrot'
  task.report_filename = 'java-parrot.html'
  task.feedback = feedback(1, [:green, :green])
end
