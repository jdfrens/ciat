$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require 'fileutils'

require 'ciat'
require 'ciat/compilers/java'
require 'ciat/compilers/copy'
require 'ciat/executors/cat'
require 'ciat/executors/parrot'
require 'ciat/feedback/composite'

desc "Cleans the output directory, compiles the Java code, runs tests"
task :default => [:clean_start, :compile_java,
                  :simple,
                  :java_cat, :java_parrot, :failures] do
  check_output_files
end

task :compile_java do
  unless system("cd java ; javac *.java")
    raise Exception.new
  end
end

task :clean_start do
  FileUtils.rm_r("temp/") if File.exists?("temp/")
end

task :simple do
  puts "Copy compiler, cat executor"
  CIAT::Suite.new(copy_compiler, cat_executor,
    :files => ['ciat/copy-cat.ciat'],
    :feedback => feedback(1, [:green, :green])).run
end
    
task :java_cat do
  puts "Java compiler, cat executor, TWO tests, special folder"
  CIAT::Suite.new(java_compiler("Hello"), cat_executor,
    :folder => 'ciat/java-cat',
    :report_filename => 'java-cat.html',
    :feedback => feedback(2, [:green, :green, :green, :green])).run
end

task :java_parrot do
  puts "Java compiler, Parrot executor, special folder"
  CIAT::Suite.new(java_compiler("Parrot5"), parrot_executor,
    :folder => 'ciat/java-parrot',
    :report_filename => 'java-parrot.html',
    :feedback => feedback(1, [:green, :green])).run  
end

task :failures do
  puts "Error during compilation"
  CIAT::Suite.new(java_compiler("Erroring"), ExceptionalExecutor.new,
    :files => 'ciat/failures/compile-error.ciat',
    :report_filename => 'compile-error.html',
    :feedback => feedback(1, [:yellow, :unset])).run
  puts "Compilation fails expectation"
  CIAT::Suite.new(copy_compiler, ExceptionalExecutor.new,
    :files => 'ciat/failures/compile-fail.ciat',
    :report_filename => 'compile-fail.html',
    :feedback => feedback(1, [:red, :unset])).run
  puts "Error during execution"
  CIAT::Suite.new(copy_compiler, ErroringExecutor.new,
    :files => 'ciat/failures/execution-error.ciat',
    :report_filename => 'execution-error.html',
    :feedback => feedback(1, [:green, :yellow])).run
  puts "Execution fails expectation"
  CIAT::Suite.new(copy_compiler, cat_executor,
    :files => 'ciat/failures/execution-fail.ciat',
    :report_filename => 'execution-fail.html',
    :feedback => feedback(1, [:green, :red])).run
end

#
# Compilers & Executors
#
def copy_compiler
  CIAT::Compilers::Copy.new
end

def java_compiler(type)
  CIAT::Compilers::Java.new('./java', type + 'Compiler')
end

def cat_executor
  CIAT::Executors::Cat.new
end

def parrot_executor
  CIAT::Executors::Parrot.new
end

class ExceptionalExecutor
  def execute(x,y)
    raise("**** should not run this executor!!!")
  end
end

class ErroringExecutor
  def execute(x, output_file)
    system("echo this should be the error output > #{output_file}")
    false
  end
end

#
# Output file checking
#
def check_output_files
  puts "Checking output files."
  Dir["**/*.html"].each do |file|
    system "tidy -mq #{file} 2> /dev/null"
  end
  unless system("diff -r temp_expected/ temp/")
    raise("**** diff failed!")
  end
end

#
# Feedback
#
def feedback(size, expected_lights)
  CIAT::Feedback::Composite.new(
    CIAT::Feedback::StandardOutput.new,
    FeedbackTester.new(size, expected_lights))
end

class FeedbackTester
  def initialize(size, expected_lights)
    @size = size
    @expected_lights = expected_lights
    @lights = []
  end
  
  def compilation(light)
    @lights << light
  end
  
  def execution(light)
    @lights << light
  end
  
  def post_tests(suite)
    unless @expected_lights == @lights
      raise "Wrong lights: [#{@expected_lights.join(',')}] expected, got [#{@lights.join(',')}]"
    end
    unless suite.size == @size
      raise "Wrong number of tests: #{@size} expected, got #{suite.size}"
    end
  end
end
