$:.unshift(File.join(File.dirname(__FILE__), "..", "lib")).
  unshift(File.join(File.dirname(__FILE__), "lib"))

require 'spec/rake/spectask'
require 'fileutils'

require 'ciat'
require 'ciat/processors/java'
require 'ciat/processors/parrot'
require 'ciat/feedback/composite'

require 'feedback_tester'
require 'helpers'

desc "Cleans the output directory, compiles the Java code, runs tests"
task :default => :acceptance

Spec::Rake::SpecTask.new(:acceptance_spec)
task :acceptance => [:full_exercise, :acceptance_spec]

task :full_exercise => [:clean_start, :compile_java,
                        :exercise_ciat,
                        :java,
                        :parrot,
                        :exercise_java_and_parrot]
                        
task :view do
  sh "open #{Dir["temp/*.html"].join(" ")}"
end

task :compile_java do
  unless system("cd java ; javac *.java")
    raise "Java files failed to compile!"
  end
end

task :clean_start do
  FileUtils.rm_r("temp/") if File.exists?("temp/")
end

# *************************************************************
# tasks to exercise CIAT itself
task :exercise_ciat => [:less_simple,
                        :subfolders,
                        :errors_and_failures]
    
CIAT::RakeTask.new(:less_simple) do |task|
  task.processors << java_compiler("Hello")
  task.folder = 'ciat/less-simple'
  task.feedback = feedback([:green, :green],
                    :report_filename => 'less-simple.html',
                    :report_title => 'Less Simple Tests')
end

CIAT::RakeTask.new(:subfolders) do |task|
  task.processors << java_compiler("Hello")
  task.folder = 'ciat/subfolders'
  task.feedback = feedback([:green, :green, :green],
                    :report_filename => 'subfolders.html',
                    :report_title => "Subfolder Tests")
end
    
task :errors_and_failures do
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/compile-error.ciat',
      :feedback => feedback([[:yellow, :unset]],
                    :report_filename => 'compile-error.html',
                    :report_title => "Errors during compilation")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/compile-fail.ciat',
      :feedback => feedback([[:red, :unset]],
                    :report_filename => 'compile-fail.html',
                    :report_title => "Failures in compilation")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/execution-error.ciat',
      :feedback => feedback([[:green, :yellow]],
                    :report_filename => 'execution-error.html',
                    :report_title => "Errors during execution")
      )
    suite.run
  end
  
  deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello"), java_interpreter("Hello")],
      :files => 'ciat/errors-and-failures/execution-fail.ciat',
      :feedback => feedback([[:green, :red]],
                    :report_filename => 'execution-fail.html',
                    :report_title => "Failures in execution")
      )
    suite.run
  end
  
  deliberate_failure(IOError, "no test files specified") do
    suite = CIAT::Suite.build(
      :processors => [java_compiler("Hello")],
      :folder => 'ciat/folder-does-not-exist',
      :feedback => feedback([],
                    :report_filename => 'folder-does-not-exist.html',
                    :report_title => "Input Folder Doesn't Exist")
      )
    suite.run
  end
end

# *************************************************************
# exercise java processors
desc "exercise all of the Java permutations"
task :java => [:compile_java, "java:compiler", "java:interpreter"]

namespace :java do
  desc "exercise the in-Java compiler variations"
  task :compiler => ["java:compiler:green", "java:compiler:yellow", "java:compiler:red"]
  
  namespace :compiler do
    desc "exercise green cases of an in-Java compiler"
    CIAT::RakeTask.new(:green) do |task|
      task.processors << java_compiler("Hello")
      task.folder = 'ciat/java/compiler/green'
      task.feedback = feedback([:green, :green],
        :report_filename => 'java-compiler-green.html')
    end
    
    desc "exercise yellow cases of an in-Java compiler"
    task :yellow do
      deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
        suite = CIAT::Suite.build(
          :processors => [java_compiler("Hello")],
          :folder => 'ciat/java/compiler/yellow',
          :feedback => feedback([:yellow],
            :report_filename => 'java-compiler-yellow.html')
          )
        suite.run
      end
    end
    
    desc "exercise red cases of an in-Java compiler"
    task :red do
      deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
        suite = CIAT::Suite.build(
          :processors => [java_compiler("Hello")],
          :folder => 'ciat/java/compiler/red',
          :feedback => feedback([:red],
            :report_filename => 'java-compiler-red.html')
          )
        suite.run
      end
    end
  end
  
  desc "exercise the in-Java interpreter variations"
  task :interpreter => ["java:interpreter:green", "java:interpreter:yellow", "java:interpreter:red"]
  
  namespace :interpreter do
    desc "exercise green cases of an in-Java interpreter"
    CIAT::RakeTask.new(:green) do |task|
      task.processors << java_interpreter("Hello")
      task.folder = 'ciat/java/interpreter/green'
      task.feedback = feedback([:green, :green],
        :report_filename => 'java-interpreter-green.html')
    end
    
    desc "exercise yellow cases of an in-Java interpreter"
    task :yellow do
      deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
        suite = CIAT::Suite.build(
          :processors => [java_interpreter("Hello")],
          :folder => 'ciat/java/interpreter/yellow',
          :feedback => feedback([:yellow, :yellow],
            :report_filename => 'java-interpreter-yellow.html')
          )
        suite.run
      end
    end
    
    desc "exercise red cases of an in-Java interpreter"
    task :red do
      deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
        suite = CIAT::Suite.build(
          :processors => [java_interpreter("Hello")],
          :folder => 'ciat/java/interpreter/red',
          :feedback => feedback([:red, :red],
            :report_filename => 'java-interpreter-red.html')
          )
        suite.run
      end
    end
  end
end

# *************************************************************
desc "task to exercise Parrot interpreter"
task :parrot => ["parrot:green", "parrot:yellow", "parrot:red"]

namespace :parrot do
  desc "exercise the green cases of the Parrot VM"
  CIAT::RakeTask.new(:green) do |task|
    task.processors << parrot_executor(interpreter)
    task.folder = 'ciat/parrot/green'
    task.feedback = feedback([:green, :green, :green],
      :report_filename => 'parrot-green.html')
  end

  desc "exercise the yellow cases of the Parrot VM"
  task :yellow do
    deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
      suite = CIAT::Suite.build(
        :processors => [parrot_executor(interpreter)],
        :folder => 'ciat/parrot/yellow',
        :feedback => feedback([:yellow], :report_filename => 'parrot-yellow.html')
        )
      suite.run
    end
  end

  desc "exercise the red cases of the Parrot VM"
  task :red do
    deliberate_failure(RuntimeError, "CIAT tests unsuccessful") do
      suite = CIAT::Suite.build(
        :processors => [parrot_executor(interpreter)],
        :folder => 'ciat/parrot/red',
        :feedback => feedback([:red], :report_filename => 'parrot-red.html')  
        )
      suite.run
    end
  end
end

# *************************************************************
# task to exercise Java compiler and Parrot executor
CIAT::RakeTask.new(:exercise_java_and_parrot) do |task|
  task.processors << java_compiler("Parrot5")
  task.processors << parrot_executor(compilation_interpreter)
  task.folder = 'ciat/java-parrot'
  task.feedback = feedback([[:green, :green]],
                    :report_filename => 'java-parrot.html')
end
