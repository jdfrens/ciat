$:.unshift(File.join(File.dirname(__FILE__), "..", "lib")).
  unshift(File.join(File.dirname(__FILE__), "lib"))

require 'fileutils'

require 'ciat'
require 'ciat/compilers/java'
require 'ciat/processors/copy'
require 'ciat/executors/parrot'
require 'ciat/feedback/composite'

require 'do_not_process_executor'
require 'do_nothing_processor'
require 'feedback_tester'
require 'blowup_feedback'
require 'helpers'

desc "Cleans the output directory, compiles the Java code, runs tests"
task :default => [:clean_start, :compile_java,
                  :exercise_ciat,
                  :exercise_java,
                  :exercise_parrot,
                  :exercise_java_and_parrot] do
  check_output_files
end

task :compile_java do
  unless system("cd java ; javac *.java")
    raise "Java files failed to compile!"
  end
end

task :clean_start do
  FileUtils.rm_r("temp/") if File.exists?("temp/")
end

# *************************************************************
# tasks to exercise CIAT itself
task :exercise_ciat => [:simple,
                        :less_simple,
                        :failures]
                        
task :simple do
  puts "Simple test of CIAT system"
  CIAT::Suite.new(
    :processors => [copy_compiler],
    :files => ['ciat/copy-cat.ciat'],
    :feedback => feedback(1, [:green])).run
end
    
task :less_simple do
  puts "two processors, two tests, special folder"
  CIAT::Suite.new(
    :processors => [java_compiler("Hello"), copy_executor],
    :folder => 'ciat/java-cat',
    :report_filename => 'java-cat.html',
    :feedback => feedback(2, [:green, :green, :green, :green])).run
end

task :failures do
  puts "Should error during compilation"
  CIAT::Suite.new(
    :processors => [DoNothingProcessor.new(:yellow), DoNotProcessExecutor.new],
    :files => 'ciat/failures/compile-error.ciat',
    :report_filename => 'compile-error.html',
    :feedback => feedback(1, [:yellow, :unset])).run
  puts "Should fail compilation expectation"
  CIAT::Suite.new(
    :processors => [DoNothingProcessor.new(:red), DoNotProcessExecutor.new],
    :files => 'ciat/failures/compile-fail.ciat',
    :report_filename => 'compile-fail.html',
    :feedback => feedback(1, [:red, :unset])).run
  puts "Should error during execution"
  CIAT::Suite.new(
    :processors => [copy_compiler, DoNothingProcessor.new(:yellow)],
    :files => 'ciat/failures/execution-error.ciat',
    :report_filename => 'execution-error.html',
    :feedback => feedback(1, [:green, :yellow])).run
  puts "Should fails execution expectation"
  CIAT::Suite.new(
    :processors => [copy_compiler, DoNothingProcessor.new(:red)],
    :files => 'ciat/failures/execution-fail.ciat',
    :report_filename => 'execution-fail.html',
    :feedback => feedback(1, [:green, :red])).run
end

# *************************************************************
# task to exercise implemented-in-Java compilers
task :exercise_java do
  # TODO: java compiler that errors
  # TODO: java compiler that fails
end

# *************************************************************
# task to exercise Parrot executor
task :exercise_parrot do
  puts "Should allow optional 'command line' element with PIR virtual machine"
  CIAT::Suite.new(
    :processors => [parrot_executor],
    :folder => 'ciat/optional-elements',
    # TODO: parrot execution that errors
    # TODO: parrot execution that fails
    :report_filename => 'optional-elements.html',
    :feedback => feedback(1, [:green])).run
end

# *************************************************************
# task to exercise Java compiler and Parrot executor
task :exercise_java_and_parrot do
  puts "Java compiler, Parrot executor, special folder"
  CIAT::Suite.new(
    :processors => [java_compiler("Parrot5"), parrot_executor],
    :folder => 'ciat/java-parrot',
    :report_filename => 'java-parrot.html',
    :feedback => feedback(1, [:green, :green])).run  
end
